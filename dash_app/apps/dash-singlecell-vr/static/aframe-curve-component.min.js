!function(e){function t(r){if(i[r])return i[r].exports;var n=i[r]={exports:{},id:r,loaded:!1};return e[r].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var i={};return t.m=e,t.c=i,t.p="",t(0)}([function(e,t){function i(e){var t=new THREE.Vector3(0,1,0);return n.setFromUnitVectors(r,e),t.applyQuaternion(n),t}if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");var r=new THREE.Vector3(0,0,1);THREE.Math.degToRad;AFRAME.registerComponent("curve-point",{schema:{},init:function(){this.el.addEventListener("componentchanged",this.changeHandler.bind(this)),this.el.emit("curve-point-change")},changeHandler:function(e){"position"==e.detail.name&&this.el.emit("curve-point-change")}}),AFRAME.registerComponent("curve",{schema:{type:{type:"string",default:"CatmullRom",oneOf:["CatmullRom","CubicBezier","QuadraticBezier","Line"]},closed:{type:"boolean",default:!1}},init:function(){this.pathPoints=null,this.curve=null,this.el.addEventListener("curve-point-change",this.update.bind(this))},update:function(e){if(this.points=Array.from(this.el.querySelectorAll("a-curve-point, [curve-point]")),this.points.length<=1)console.warn("At least 2 curve-points needed to draw a curve"),this.curve=null;else{var t=this.points.map(function(e){return void 0!==e.x&&void 0!==e.y&&void 0!==e.z?e:e.object3D.position});if(!AFRAME.utils.deepEqual(t,this.pathPoints)||"CustomEvent"!==e&&!AFRAME.utils.deepEqual(this.data,e)){switch(this.curve=null,this.pathPoints=t,this.data.type){case"CubicBezier":if(4!=this.pathPoints.length)throw new Error("The Three constructor of type CubicBezierCurve3 requires 4 points");this.curve=new THREE.CubicBezierCurve3(this.pathPoints[0],this.pathPoints[1],this.pathPoints[2],this.pathPoints[3]);break;case"QuadraticBezier":if(3!=this.pathPoints.length)throw new Error("The Three constructor of type QuadraticBezierCurve3 requires 3 points");this.curve=new THREE.QuadraticBezierCurve3(this.pathPoints[0],this.pathPoints[1],this.pathPoints[2]);break;case"Line":if(2!=this.pathPoints.length)throw new Error("The Three constructor of type LineCurve3 requires 2 points");this.curve=new THREE.LineCurve3(this.pathPoints[0],this.pathPoints[1]);break;case"CatmullRom":this.curve=new THREE.CatmullRomCurve3(this.pathPoints);break;case"Spline":this.curve=new THREE.SplineCurve3(this.pathPoints);break;default:throw new Error("No Three constructor of type (case sensitive): "+this.data.type+"Curve3")}this.curve.closed=this.data.closed,this.el.emit("curve-updated")}}},remove:function(){this.el.removeEventListener("curve-point-change",this.update.bind(this))},closestPointInLocalSpace:function(e,t,r,n){if(!this.curve)throw Error("Curve not instantiated yet.");t=t||.1/this.curve.getLength(),n=n||.5,r=r||.5,n/=2;var s=r+n,a=r-n,o=this.curve.getPointAt(s),c=this.curve.getPointAt(a),u=o.distanceTo(e),h=c.distanceTo(e),p=u<h;if(n<t){var v=this.curve.getTangentAt(p?s:a);if(n<t)return{result:p?s:a,location:p?o:c,distance:p?u:h,normal:i(v),tangent:v}}return u<h?this.closestPointInLocalSpace(e,t,s,n):this.closestPointInLocalSpace(e,t,a,n)}});var n=new THREE.Quaternion;AFRAME.registerShader("line",{schema:{color:{default:"#ff0000"}},init:function(e){this.material=new THREE.LineBasicMaterial(e)},update:function(e){this.material=new THREE.LineBasicMaterial(e)}}),AFRAME.registerComponent("draw-curve",{schema:{curve:{type:"selector"}},init:function(){this.data.curve.addEventListener("curve-updated",this.update.bind(this))},update:function(){if(this.data.curve&&(this.curve=this.data.curve.components.curve),this.curve&&this.curve.curve){var e=(new THREE.BufferGeometry).setFromPoints(this.curve.curve.getPoints(10*this.curve.curve.getPoints().length)),t=this.el.getOrCreateObject3D("mesh",THREE.Line);lineMaterial=t.material?t.material:new THREE.LineBasicMaterial({color:"#ff0000"}),this.el.setObject3D("mesh",new THREE.Line(e,lineMaterial))}},remove:function(){this.data.curve.removeEventListener("curve-updated",this.update.bind(this)),this.el.getObject3D("mesh").geometry=new THREE.BufferGeometry}}),AFRAME.registerPrimitive("a-draw-curve",{defaultComponents:{"draw-curve":{}},mappings:{curveref:"draw-curve.curve"}}),AFRAME.registerPrimitive("a-curve-point",{defaultComponents:{"curve-point":{}},mappings:{}}),AFRAME.registerPrimitive("a-curve",{defaultComponents:{curve:{}},mappings:{type:"curve.type"}})}]);